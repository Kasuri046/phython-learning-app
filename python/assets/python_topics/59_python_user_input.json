{
  "topic": "user input",
  "sections": [
    {
      "heading": "User Input",
      "description": "Python allows for user input. That means we are able to ask the user for input. The following example asks for your name, and when you enter a name, it gets printed on the screen:",
      "code_blocks": [
        {
          "example_title": "Example",
          "notes": "Ask for user input:",
          "raw_html_class": "w3-code notranslate pythonHigh",
          "code": "print(\"Enter your name:\")\n\nname = input()\n\nprint(f\"Hello {name}\")"
        }
      ]
    },
    {
      "heading": "Using prompt",
      "description": "In the example above, the user had to input their name on a new line. The Python input() function has a prompt parameter, which acts as a message you can put in front of the user input, on the same line:",
      "code_blocks": [
        {
          "example_title": "Example",
          "notes": "Add a message in front of the user input:",
          "raw_html_class": "w3-code notranslate pythonHigh",
          "code": "name = input(\"Enter your name:\")\n\nprint(f\"Hello {name})"
        }
      ]
    },
    {
      "heading": "Multiple Inputs",
      "description": "You can add as many inputs as you want, Python will stop executing at each of them, waiting for user input:",
      "code_blocks": [
        {
          "example_title": "Example",
          "notes": "Multiple inputs:",
          "raw_html_class": "w3-code notranslate pythonHigh",
          "code": "name = input(\"Enter your name:\")\n\nprint(f\"Hello {name}\")\n\nfav1 = input(\"What is your favorite animal:\")\n\nfav2 = input(\"What is your favorite color:\")\n\nfav3 = input(\"What is your favorite number:\")\n\nprint(f\"Do you want a {fav2} {fav1} with {fav3} legs?\")"
        }
      ]
    },
    {
      "heading": "Input Number",
      "description": "The input from the user is treated as a string. Even if, in the example above, you can input a number, the Python interpreter will still treat it as a string. You can convert the input into a number with the float() function:",
      "code_blocks": [
        {
          "example_title": "Example",
          "notes": "To find the square root, the input has to be converted into a number:",
          "raw_html_class": "w3-code notranslate pythonHigh",
          "code": "x = input(\"Enter a number:\")\n\n\n\n#find the square root of the number:\n\ny = math.sqrt(float(x))\n\n\n\nprint(f\"The square root of {x} is {y}\")"
        }
      ]
    },
    {
      "heading": "Validate Input",
      "description": "It is a good practice to validate any input from the user. In the example above, an error will occur if the user inputs something other than a number. To avoid getting an error, we can test the input, and if it is not a number, the user could get a message like \"Wrong input, please try again\", and allowed to make a new input:",
      "code_blocks": [
        {
          "example_title": "Example",
          "notes": "Keep asking until you get a number:",
          "raw_html_class": "w3-code notranslate pythonHigh",
          "code": "y = True\n\nwhile y == True:\n\n\u00bb\u00bbx = input(\"Enter a number:\")\n\n\u00bb\u00bbtry:\n\u00bb\u00bb\u00bb\u00bbx = float(x);\n\u00bb\u00bb\u00bb\u00bby = False\n\n\u00bb\u00bbexcept:\n\u00bb\u00bb\u00bb\u00bbprint(\"Wrong input, please try again.\")\n\n\n\nprint(\"Thank you!\")"
        }
      ]
    }
  ]
}