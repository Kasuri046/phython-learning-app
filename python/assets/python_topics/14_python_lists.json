{
  "topic": "lists",
  "sections": [
    {
      "heading": "List",
      "description": "Lists are used to store multiple items in a single variable. Lists are one of 4 built-in data types in Python used to store collections of data, the other 3 are Tuple, Set, and Dictionary, all with different qualities and usage. Lists are created using square brackets:",
      "code_blocks": [
        {
          "example_title": "Example",
          "notes": "Create a List:",
          "raw_html_class": "w3-code notranslate pythonHigh",
          "code": "thislist = [\"apple\", \"banana\", \"cherry\"]\n\nprint(thislist)"
        }
      ]
    },
    {
      "heading": "List Items",
      "description": "List items are ordered, changeable, and allow duplicate values. List items are indexed, the first item has index [0], the second item has index [1] etc.",
      "code_blocks": []
    },
    {
      "heading": "Ordered",
      "description": "When we say that lists are ordered, it means that the items have a defined order, and that order will not change. If you add new items to a list, the new items will be placed at the end of the list.",
      "code_blocks": []
    },
    {
      "heading": "Changeable",
      "description": "The list is changeable, meaning that we can change, add, and remove items in a list after it has been created.",
      "code_blocks": []
    },
    {
      "heading": "Allow Duplicates",
      "description": "Since lists are indexed, lists can have items with the same value:",
      "code_blocks": [
        {
          "example_title": "Example",
          "notes": "Lists allow duplicate values:",
          "raw_html_class": "w3-code notranslate pythonHigh",
          "code": "thislist = [\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\"]\n\nprint(thislist)"
        }
      ]
    },
    {
      "heading": "List Length",
      "description": "To determine how many items a list has, use the len() function:",
      "code_blocks": [
        {
          "example_title": "Example",
          "notes": "Print the number of items in the list:",
          "raw_html_class": "w3-code notranslate pythonHigh",
          "code": "thislist = [\"apple\", \"banana\", \"cherry\"]\n\nprint(len(thislist))"
        }
      ]
    },
    {
      "heading": "List Items - Data Types",
      "description": "List items can be of any data type: A list can contain different data types:",
      "code_blocks": [
        {
          "example_title": "Example",
          "notes": "String, int and boolean data types:",
          "raw_html_class": "w3-code notranslate pythonHigh",
          "code": "list1 = [\"apple\", \"banana\", \"cherry\"]\n\nlist2 = [1, 5, 7, 9, 3]\n\nlist3 = [True, False, False]"
        },
        {
          "example_title": "Example",
          "notes": "A list with strings, integers and boolean values:",
          "raw_html_class": "w3-code notranslate pythonHigh",
          "code": "list1 = [\"abc\", 34, True, 40, \"male\"]"
        }
      ]
    },
    {
      "heading": "type()",
      "description": "From Python's perspective, lists are defined as objects with the data type 'list':",
      "code_blocks": [
        {
          "example_title": "Example",
          "notes": "What is the data type of a list?",
          "raw_html_class": "w3-code notranslate pythonHigh",
          "code": "mylist = [\"apple\", \"banana\", \"cherry\"]\n\nprint(type(mylist))"
        }
      ]
    },
    {
      "heading": "The list() Constructor",
      "description": "It is also possible to use the list() constructor when creating a new list.",
      "code_blocks": [
        {
          "example_title": "Example",
          "notes": "Using the list() constructor to make a List:",
          "raw_html_class": "w3-code notranslate pythonHigh",
          "code": "thislist = list((\"apple\", \"banana\", \"cherry\")) # note the double round-brackets\n\nprint(thislist)"
        }
      ]
    },
    {
      "heading": "Python Collections (Arrays)",
      "description": "There are four collection data types in the Python programming language: When choosing a collection type, it is useful to understand the properties of that type. Choosing the right type for a particular data set could mean retention of meaning, and, it could mean an increase in efficiency or security.",
      "code_blocks": []
    }
  ]
}