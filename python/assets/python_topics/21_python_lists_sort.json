{
  "topic": "lists sort",
  "sections": [
    {
      "heading": "Sort List Alphanumerically",
      "description": "List objects have a sort() method that will sort the list alphanumerically, ascending, by default:",
      "code_blocks": [
        {
          "example_title": "Example",
          "notes": "Sort the list alphabetically:",
          "raw_html_class": "w3-code notranslate pythonHigh",
          "code": "thislist = [\"orange\", \"mango\", \"kiwi\",\n\u00bb\u00bb\"pineapple\", \"banana\"]\nthislist.sort()\n\nprint(thislist)"
        },
        {
          "example_title": "Example",
          "notes": "Sort the list numerically:",
          "raw_html_class": "w3-code notranslate pythonHigh",
          "code": "thislist = [100, 50, 65, 82, 23]\nthislist.sort()\n\nprint(thislist)"
        }
      ]
    },
    {
      "heading": "Sort Descending",
      "description": "To sort descending, use the keyword argument reverse = True:",
      "code_blocks": [
        {
          "example_title": "Example",
          "notes": "Sort the list descending:",
          "raw_html_class": "w3-code notranslate pythonHigh",
          "code": "thislist = [\"orange\", \"mango\", \"kiwi\",\n\u00bb\u00bb\"pineapple\", \"banana\"]\nthislist.sort(reverse = True)\n\nprint(thislist)"
        },
        {
          "example_title": "Example",
          "notes": "Sort the list descending:",
          "raw_html_class": "w3-code notranslate pythonHigh",
          "code": "thislist = [100, 50, 65, 82, 23]\nthislist.sort(reverse = True)\n\nprint(thislist)"
        }
      ]
    },
    {
      "heading": "Customize Sort Function",
      "description": "You can also customize your own function by using the keyword argument key = function. The function will return a number that will be used to sort the list (the lowest number first):",
      "code_blocks": [
        {
          "example_title": "Example",
          "notes": "Sort the list based on how close the number is to 50:",
          "raw_html_class": "w3-code notranslate pythonHigh",
          "code": "def myfunc(n):\n\u00bb\u00bbreturn abs(n - 50)\n\nthislist = [100, 50, 65, 82, 23]\nthislist.sort(key =\n\u00bb\u00bbmyfunc)\nprint(thislist)"
        }
      ]
    },
    {
      "heading": "Case Insensitive Sort",
      "description": "By default the sort() method is case sensitive, resulting in all capital letters being sorted before lower case letters: Luckily we can use built-in functions as key functions when sorting a list. So if you want a case-insensitive sort function, use str.lower as a key function:",
      "code_blocks": [
        {
          "example_title": "Example",
          "notes": "Case sensitive sorting can give an unexpected result:",
          "raw_html_class": "w3-code notranslate pythonHigh",
          "code": "thislist = [\"banana\", \"Orange\", \"Kiwi\", \"cherry\"]\nthislist.sort()\nprint(thislist)"
        },
        {
          "example_title": "Example",
          "notes": "Perform a case-insensitive sort of the list:",
          "raw_html_class": "w3-code notranslate pythonHigh",
          "code": "thislist = [\"banana\", \"Orange\", \"Kiwi\", \"cherry\"]\nthislist.sort(key\n\u00bb\u00bb= str.lower)\nprint(thislist)"
        }
      ]
    },
    {
      "heading": "Reverse Order",
      "description": "What if you want to reverse the order of a list, regardless of the alphabet? The reverse() method reverses the current sorting order of the elements.",
      "code_blocks": [
        {
          "example_title": "Example",
          "notes": "Reverse the order of the list items:",
          "raw_html_class": "w3-code notranslate pythonHigh",
          "code": "thislist = [\"banana\", \"Orange\", \"Kiwi\", \"cherry\"]\nthislist.reverse()\nprint(thislist)"
        }
      ]
    }
  ]
}