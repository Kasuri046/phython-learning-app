{
  "interview_questions": [
    {
      "question": "What is C++?",
      "answer": "C++ is a general-purpose programming language created as an extension of C. It supports object-oriented, procedural, and generic programming."
    },
    {
      "question": "What are the key features of C++?",
      "answer": "Key features of C++ include object-oriented programming, polymorphism, encapsulation, abstraction, operator overloading, exception handling, and templates."
    },
    {
      "question": "What is the difference between C and C++?",
      "answer": "C is a procedural programming language, whereas C++ supports both procedural and object-oriented programming. C++ also includes features like classes, inheritance, and templates."
    },
    {
      "question": "What is an object in C++?",
      "answer": "An object is an instance of a class. It contains data members and member functions that operate on the data."
    },
    {
      "question": "What is a class in C++?",
      "answer": "A class is a blueprint for creating objects. It defines the properties (data members) and behaviors (member functions) of an object."
    },
    {
      "question": "What is inheritance in C++?",
      "answer": "Inheritance allows a class (child class) to derive properties and behaviors from another class (parent class), promoting code reusability."
    },
    {
      "question": "What are access specifiers in C++?",
      "answer": "Access specifiers determine the visibility of class members. C++ has three access specifiers: public, private, and protected."
    },
    {
      "question": "What is polymorphism in C++?",
      "answer": "Polymorphism allows one interface to be used for different data types. It can be achieved through function overloading and function overriding."
    },
    {
      "question": "What is the difference between compile-time and run-time polymorphism?",
      "answer": "Compile-time polymorphism is achieved using function overloading and operator overloading, whereas run-time polymorphism is achieved using virtual functions."
    },
    {
      "question": "What is a virtual function in C++?",
      "answer": "A virtual function is a member function that can be overridden in derived classes. It enables dynamic binding and run-time polymorphism."
    },
    {
      "question": "What is the difference between struct and class in C++?",
      "answer": "By default, members of a struct are public, whereas members of a class are private."
    },
    {
      "question": "What is a constructor in C++?",
      "answer": "A constructor is a special function in a class that is automatically called when an object is created. It initializes the object."
    },
    {
      "question": "What are the types of constructors in C++?",
      "answer": "There are three types of constructors: default constructor, parameterized constructor, and copy constructor."
    },
    {
      "question": "What is a destructor in C++?",
      "answer": "A destructor is a special function that is automatically called when an object goes out of scope. It is used to release resources."
    },
    {
      "question": "What is function overloading in C++?",
      "answer": "Function overloading allows multiple functions with the same name but different parameters to be defined in a class."
    },
    {
      "question": "What is operator overloading?",
      "answer": "Operator overloading allows operators to be redefined and used in different ways depending on the operands."
    },
    {
      "question": "What is a friend function in C++?",
      "answer": "A friend function is a function that is not a member of a class but has access to its private and protected members."
    },
    {
      "question": "What is an abstract class in C++?",
      "answer": "An abstract class is a class that contains at least one pure virtual function. It cannot be instantiated directly."
    },
    {
      "question": "What is a pure virtual function?",
      "answer": "A pure virtual function is a function that is declared in a base class but must be implemented in derived classes."
    },
    {
      "question": "What is the difference between new and malloc in C++?",
      "answer": "`new` is an operator that calls the constructor, while `malloc` is a function that allocates memory but does not call constructors."
    },
    {
      "question": "What is the difference between delete and free?",
      "answer": "`delete` is used for objects allocated with `new`, and it calls the destructor, whereas `free` is used with `malloc` and does not call the destructor."
    },
    {
      "question": "What is exception handling in C++?",
      "answer": "Exception handling in C++ allows handling runtime errors using try, catch, and throw keywords."
    },
    {
      "question": "What is the difference between deep copy and shallow copy?",
      "answer": "A shallow copy copies memory addresses, leading to shared data, while a deep copy duplicates data into a new memory location."
    },
    {
      "question": "What is a static member in C++?",
      "answer": "A static member is shared across all objects of a class. It belongs to the class rather than an individual object."
    },
    {
      "question": "What is the difference between stack and heap memory in C++?",
      "answer": "Stack memory is used for static memory allocation and function calls, while heap memory is used for dynamic memory allocation."
    },
    {
      "question": "What is a namespace in C++?",
      "answer": "A namespace is used to avoid naming conflicts by grouping related classes, functions, and variables together."
    },
    {
      "question": "What is the use of the `this` pointer?",
      "answer": "The `this` pointer refers to the current instance of the class and is used to access members within the class."
    },
    {
      "question": "What is a lambda function in C++?",
      "answer": "A lambda function is an anonymous function that can be used for inline operations and is defined using the `[]` syntax."
    },
    {
      "question": "What is the difference between reference and pointer in C++?",
      "answer": "A pointer holds the address of a variable and can be reassigned, whereas a reference is an alias for a variable and cannot be changed after initialization."
    }
  ]
}
