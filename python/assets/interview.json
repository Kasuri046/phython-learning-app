{
  "interview_questions": [
    {
      "question": "What is Python?",
      "answer": "Python is a high-level, interpreted programming language renowned for its clear syntax and versatility. It supports multiple paradigms, including object-oriented, functional, and procedural programming, making it ideal for web development, data science, automation, and scripting. Its extensive standard library and active community further enhance its applicability across domains."
    },
    {
      "question": "What are Python’s key features?",
      "answer": "Python’s key features include dynamic typing, which eliminates explicit type declarations; support for object-oriented, functional, and procedural programming; a comprehensive standard library; cross-platform compatibility; and a syntax designed for readability and simplicity, reducing development time and improving maintainability."
    },
    {
      "question": "How does Python differ from C or Java?",
      "answer": "Unlike C, a compiled, low-level language focused on performance, Python is interpreted and prioritizes simplicity, sacrificing fine-grained memory control. Compared to Java, Python uses dynamic typing instead of static typing, has a more concise syntax, and requires no explicit compilation, enabling faster development but potentially slower execution."
    },
    {
      "question": "What is an object in Python?",
      "answer": "In Python, an object is an instance of a class that encapsulates data (attributes) and behavior (methods). Python treats all entities, including primitive types like integers and strings, as objects, each with an associated type and memory allocation, enabling flexible and consistent programming."
    },
    {
      "question": "What is a class in Python?",
      "answer": "A class serves as a template for creating objects, defining their attributes (data) and methods (functions). It encapsulates related properties and behaviors, supporting object-oriented principles like inheritance and polymorphism, and is instantiated to create objects with specific states and functionalities."
    },
    {
      "question": "What is inheritance in Python?",
      "answer": "Inheritance enables a class (subclass) to acquire attributes and methods from another class (parent class), promoting code reuse and extensibility. Python supports single and multiple inheritance, allowing subclasses to extend or override parent class behavior while maintaining a hierarchical relationship."
    },
    {
      "question": "What are access specifiers in Python?",
      "answer": "Python uses naming conventions to control access: public members have no prefix, protected members use a single underscore (_), and private members use double underscores (__). These are not enforced strictly but signal intent, with private members undergoing name mangling to reduce accidental access."
    },
    {
      "question": "What is polymorphism in Python?",
      "answer": "Polymorphism allows objects of different classes to be treated uniformly through a shared interface, typically via method overriding or duck typing. In Python, this enables flexible code where functions can operate on objects of varying types as long as they implement the required methods."
    },
    {
      "question": "What’s method overloading vs. overriding?",
      "answer": "Method overloading, though not natively supported in Python, involves defining multiple methods with the same name but different parameters, achieved using default arguments or variable-length parameters. Method overriding allows a subclass to redefine a parent class’s method, enabling customized behavior while maintaining the same method signature."
    },
    {
      "question": "What is method resolution order?",
      "answer": "Method Resolution Order (MRO) defines the sequence in which Python searches for methods in a class hierarchy, crucial for multiple inheritance. It follows the C3 linearization algorithm, ensuring a consistent and predictable order, accessible via the `__mro__` attribute or `mro()` method."
    },
    {
      "question": "What’s a tuple vs. a list?",
      "answer": "A tuple is an immutable, ordered collection, meaning its elements cannot be modified after creation, making it faster and suitable for fixed data. A list is a mutable, ordered collection, allowing additions, deletions, and modifications, ideal for dynamic data but with higher memory overhead."
    },
    {
      "question": "What is a constructor in Python?",
      "answer": "A constructor, defined as the `__init__` method, initializes a new object’s attributes upon creation. It is automatically called when an object is instantiated, allowing the setting of initial states or parameters, and is essential for preparing objects for use."
    },
    {
      "question": "What are Python’s constructor types?",
      "answer": "Python supports a default constructor, which takes only the `self` parameter and sets default attribute values, and a parameterized constructor, which accepts additional parameters to initialize specific attributes, providing flexibility in object creation based on input data."
    },
    {
      "question": "What is a destructor in Python?",
      "answer": "A destructor, implemented as the `__del__` method, is called automatically when an object is garbage-collected, typically to release resources like file handles. Python’s garbage collector often makes explicit destructors unnecessary, but they’re useful for custom cleanup in specific scenarios."
    },
    {
      "question": "How is function overloading done?",
      "answer": "Python does not support traditional function overloading due to its dynamic typing. Instead, developers use default parameters, variable-length arguments (*args, **kwargs), or conditional logic within a single function to handle different argument types or counts, achieving similar flexibility."
    },
    {
      "question": "What are decorators in Python?",
      "answer": "Decorators are higher-order functions that wrap and modify other functions or methods, enhancing their behavior without altering their source code. Commonly used for logging, authentication, or caching, they are applied using the `@` syntax, improving code modularity and reusability."
    },
    {
      "question": "What’s a class method vs. instance method?",
      "answer": "A class method, marked with `@classmethod` and taking `cls` as its first parameter, operates on the class itself, accessing or modifying class-level data. An instance method, taking `self`, operates on a specific object, manipulating its unique attributes and state."
    },
    {
      "question": "What is an abstract base class?",
      "answer": "An abstract base class, created using the `abc` module, defines abstract methods that subclasses must implement, preventing direct instantiation. It enforces a contract for derived classes, ensuring consistent interfaces in object-oriented designs, such as in plugin systems."
    },
    {
      "question": "What is a property in Python?",
      "answer": "A property, defined with the `@property` decorator, manages attribute access by providing getter, setter, and deleter methods. It allows controlled access to attributes, enabling validation or computation while maintaining the simplicity of attribute-like syntax for users."
    },
    {
      "question": "What’s a list vs. a dictionary?",
      "answer": "A list is an ordered, mutable collection of elements accessed by numerical indices, suitable for sequences like arrays. A dictionary is an unordered, mutable collection of key-value pairs accessed by unique keys, ideal for associative data like mappings or configurations."
    },
    {
      "question": "What is the Global Interpreter Lock?",
      "answer": "The Global Interpreter Lock (GIL) is a mutex in CPython that synchronizes access to Python objects, ensuring thread safety by allowing only one native thread to execute Python bytecode at a time. It simplifies memory management but can bottleneck multi-threaded applications."
    },
    {
      "question": "What is exception handling?",
      "answer": "Exception handling in Python manages runtime errors using `try`, `except`, `else`, and `finally` blocks. The `try` block tests for errors, `except` handles specific exceptions, `else` runs if no errors occur, and `finally` executes cleanup code, ensuring robust error recovery."
    },
    {
      "question": "What’s shallow vs. deep copy?",
      "answer": "A shallow copy, created with `copy.copy()`, duplicates an object but shares references to nested objects, potentially leading to unintended modifications. A deep copy, using `copy.deepcopy()`, fully duplicates the object and all nested objects, ensuring complete independence and data integrity."
    },
    {
      "question": "What is a static method?",
      "answer": "A static method, defined with `@staticmethod`, belongs to a class but does not access instance or class data, taking no implicit first parameter like `self` or `cls`. It’s used for utility functions logically related to the class, such as format converters."
    },
    {
      "question": "What’s a module vs. a package?",
      "answer": "A module is a single Python file containing functions, classes, or variables, imported to organize code. A package is a directory of modules with an `__init__.py` file, enabling hierarchical structuring and import of related modules for larger projects."
    },
    {
      "question": "What is a namespace in Python?",
      "answer": "A namespace maps names to objects, preventing naming conflicts by scoping variables. Python maintains built-in, global, and local namespaces, resolved in that order (LEGB rule: Local, Enclosing, Global, Built-in), ensuring clear variable access and modularity."
    },
    {
      "question": "What’s the role of `self` in methods?",
      "answer": "The `self` parameter in instance methods refers to the current object, enabling access to its attributes and methods. Explicitly included as the first parameter, it supports object-oriented programming by distinguishing instance-specific data from class or global data."
    },
    {
      "question": "What is a lambda function?",
      "answer": "A lambda function is an anonymous, single-expression function defined with the `lambda` keyword, used for concise, inline operations like sorting, filtering, or mapping. It’s limited to simple tasks but enhances code brevity in functional programming patterns."
    },
    {
      "question": "What’s list comprehension vs. generator?",
      "answer": "A list comprehension creates a complete list in memory, suitable for small datasets but memory-intensive. A generator expression, using parentheses, produces values lazily via an iterator, conserving memory for large or infinite sequences while maintaining similar syntax."
    }
  ]
}