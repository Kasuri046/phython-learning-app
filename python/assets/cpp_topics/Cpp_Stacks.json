{
  "title": "C++ Stacks",
  "content": [
    {
      "heading": "C++ Stack",
      "paragraphs": [
        "A stack stores multiple elements in a specific order, called LIFO.",
        "LIFO stands for \nLast in, First Out. To visualize LIFO, think of a pile of pancakes, \nwhere pancakes are both added and removed from the top. So when removing a pancake, it will always be the last \none you added. This way of organizing elements is called LIFO in computer \nscience and programming.",
        "Unlike vectors, elements in the stack are not \naccessed by index numbers. Since elements are added and removed from the top, you can only access the element at the top of the stack.",
        "To use a stack, you have to include the <stack> header file:"
      ]
    },
    {
      "heading": "Create a Stack",
      "paragraphs": [
        "To create a stack, use the stack keyword, \nand specify the type of values it should store within angle brackets <> \nand then the name of the stack, like: stack<type> \nstackName.",
        "Note: The type of the stack (string in our example) cannot be changed after its been declared.",
        "Note: You cannot add elements to the stack at the time of declaration, like you can with vectors:"
      ]
    },
    {
      "heading": "Add Elements",
      "paragraphs": [
        "To add elements to the stack, use the .push() \nfunction, after declaring the stack:"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "// Create a stack of strings called cars\nstack<string> cars;\n// Add elements to the stack\ncars.push(\"Volvo\");\ncars.push(\"BMW\");\ncars.push(\"Ford\");\ncars.push(\"Mazda\");\n",
        "The stack will look like this (remember that the last element added is the top element):"
      ]
    },
    {
      "heading": "Access Stack Elements",
      "paragraphs": [
        "You cannot access stack elements by referring to index numbers, like you would with \narrays and vectors.",
        "In a stack, you can only access the top element, which is done using the .top() function:"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "// Access the top element\ncout << cars.top();\n// Outputs \"Mazda\""
      ]
    },
    {
      "heading": "Change the Top Element",
      "paragraphs": [
        "You can also use the .top function to change the value of the top element:"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "// Change the value of the top element\ncars.top() = \"Tesla\";\n// Access the top element\ncout << cars.top();\n// Now outputs \"Tesla\" instead of \"Mazda\""
      ]
    },
    {
      "heading": "Remove Elements",
      "paragraphs": [
        "You can use the .pop() function to remove an element from the stack.",
        "This will remove the last element that was added to the stack:"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "// Create a stack of strings called cars\nstack<string> cars;\n// Add elements to the stack\ncars.push(\"Volvo\");\ncars.push(\"BMW\");\ncars.push(\"Ford\");\ncars.push(\"Mazda\");\n// Remove the last added element (Mazda)\ncars.pop();\n// Access the top element (Now Ford)\ncout << cars.top();\n"
      ]
    },
    {
      "heading": "Get the Size of the Stack",
      "paragraphs": [
        "To find out how many elements a stack has, use the .size() function:"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "cout << cars.size();\n"
      ]
    },
    {
      "heading": "Check if the Stack is Empty",
      "paragraphs": [
        "Use the .empty() function to find out if the \nstack is empty or not.",
        "The .empty() function returns \n1 (true) if the stack is empty and 0 (false) \notherwise:"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "stack<string> cars;\ncout << cars.empty();\n// Outputs 1 (The stack is empty)"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "stack<string> cars;\ncars.push(\"Volvo\");\ncars.push(\"BMW\");\ncars.push(\"Ford\");\ncars.push(\"Mazda\");\ncout << cars.empty();\n// Outputs 0 (not empty)"
      ]
    },
    {
      "heading": "Stacks and Queues",
      "paragraphs": [
        "Stacks are often mentioned together with Queues, which is a similar data structure described on the next page."
      ]
    }
  ]
}