{
  "title": "C++ Queues",
  "content": [
    {
      "heading": "C++ Queue",
      "paragraphs": [
        "A queue stores multiple elements in a specific order, called FIFO.",
        "FIFO stands for \nFirst in, First Out. To visualize FIFO, think of a queue as people standing in line in a supermarket.\nThe first person to stand in line is also the first who can pay and leave the supermarket. This way of organizing elements is called FIFO in computer science and programming.",
        "Unlike vectors, elements in the queue are not \naccessed by index numbers. Since queue elements are added at the end and removed \nfrom the front, you can only access an element at the front or the back.",
        "To use a queue, you have to include the <queue> header file:"
      ]
    },
    {
      "heading": "Create a Queue",
      "paragraphs": [
        "To create a queue, use the queue keyword, \nand specify the type of values it should store within angle brackets <> \nand then the name of the queue, like: queue<type> \nqueueName.",
        "Note: The type of the queue (string in our example) cannot be changed after its been declared.",
        "Note: You cannot add elements to the queue at the time of declaration, like you can with vectors:"
      ]
    },
    {
      "heading": "Add Elements",
      "paragraphs": [
        "To add elements to the queue, you can use the .push() \nfunction after declaring the queue.",
        "The .push() function adds an element at the \nend of the queue:"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "// Create a queue of strings\nqueue<string> cars;\n\n// Add elements to the queue\ncars.push(\"Volvo\");\n\ncars.push(\"BMW\");\n\ncars.push(\"Ford\");\n\ncars.push(\"Mazda\");\n\n",
        "The queue will look like this:"
      ]
    },
    {
      "heading": "Access Queue Elements",
      "paragraphs": [
        "You cannot access queue elements by referring to index numbers, like you would with \narrays and vectors.",
        "In a queue, you can only access the element at the front or the back, using\n.front() and .back() \nrespectively:"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "// Access the \n// front element (first and oldest)\ncout << cars.front();\n\n// Outputs \"Volvo\"\n// Access the \n// back element (last and newest)\ncout << cars.back();\n\n// Outputs \"Mazda\""
      ]
    },
    {
      "heading": "Change Front and Back Elements",
      "paragraphs": [
        "You can also use .front and .back to change the value of the front and back elements:"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "// Change the value of the front element\ncars.front() = \"Tesla\";\n\n// Change the value of the back element\ncars.back() = \"VW\";\n\n// Access the front element\ncout << cars.front();\n\n// Now outputs \"Tesla\" instead of \"Volvo\"\n// Access the back element\ncout << cars.back();\n\n// Now outputs \"VW\" instead of \"Mazda\""
      ]
    },
    {
      "heading": "Remove Elements",
      "paragraphs": [
        "You can use the .pop() function to remove an element from the \nqueue.",
        "This will remove the front element (the first and oldest element that was added to the \nqueue):"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "// Create a queue of strings\nqueue<string> cars;\n\n// Add elements to the queue\ncars.push(\"Volvo\");\n\ncars.push(\"BMW\");\n\ncars.push(\"Ford\");\n\ncars.push(\"Mazda\");\n\n// Remove the \n// front \n// element (Volvo)\ncars.pop();\n\n// Access the front \n// element (Now BMW)\ncout << cars.front();\n\n"
      ]
    },
    {
      "heading": "Get the Size of a Queue",
      "paragraphs": [
        "To find out how many elements there are in a queue, use the .size() function:"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "cout << cars.size();\n\n"
      ]
    },
    {
      "heading": "Check if the Queue is Empty",
      "paragraphs": [
        "Use the .empty() function to find out if the \nqueue is empty or not.",
        "The .empty() function returns \n1 (true) if the queue is empty and 0 (false) \notherwise:"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "queue<string> cars;\n\ncout << cars.empty();\n\n// Outputs 1 (The queue is empty)"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "queue<string> cars;\n\ncars.push(\"Volvo\");\n\ncars.push(\"BMW\");\n\ncars.push(\"Ford\");\n\ncars.push(\"Mazda\");\n\ncout << cars.empty();\n\n// Outputs 0 (not empty)"
      ]
    },
    {
      "heading": "Stacks and Queues",
      "paragraphs": [
        "Queues are often mentioned together with Stacks, which is a similar data structure described in the \nprevious page."
      ]
    }
  ]
}