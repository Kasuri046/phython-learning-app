{
  "title": "C++ Sets",
  "content": [
    {
      "heading": "C++ Set",
      "paragraphs": [
        "A set stores unique elements where they:",
        "Are sorted automatically in ascending order.\nAre unique, meaning equal or duplicate values are ignored.\nCan be added or removed, but the value of an existing element cannot be changed.\nCannot be accessed by index numbers, because the order is based on \nsorting and not indexing.",
        "To use a set, you have to include the <set> header file:"
      ]
    },
    {
      "heading": "Create a Set",
      "paragraphs": [
        "To create a set, use the set keyword, \nand specify the type of values it should store within angle brackets <> \nand then the name of the set, like: set<type> \nsetName.",
        "If you want to add elements at the time of declaration, place them in a comma-separated list, inside curly braces {}:",
        "As you can see from the result above, the elements in the set are \nsorted automatically. In this case, alphabetically, as we are working with strings.",
        "If you store integers in the set, the returned values are sorted numerically:"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "// Create a set called cars that will store strings\nset<string> cars;\n"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "// Create a set called cars that will store strings\nset<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n// Print set elements\nfor (string car : cars) {\n  cout << car << \"\\n\";\n}",
        "The output will be:"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "// Create a set called numbers that will store integers\nset<int> numbers = {1, 7, 3, 2, 5, 9};\n// Print set elements\nfor (int num : numbers) {\n  cout << num << \"\\n\";\n}",
        "The output will be:"
      ]
    },
    {
      "heading": "Sort a Set in Descending Order",
      "paragraphs": [
        "By default, the elements in a set are sorted in ascending order. If you want to reverse the order, \nyou can use the greater<type> \nfunctor inside the angle brackets, like this:"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "// Sort elements in a set in descending order\nset<int, greater<int>> numbers = {1, 7, 3, 2, 5, 9};\n// Print the elements\nfor (int num : numbers) {\n  cout << num << \"\\n\";\n}",
        "The output will be:"
      ]
    },
    {
      "heading": "Unique Elements",
      "paragraphs": [
        "Elements in a set are unique, which means they cannot be \nduplicated or equal.",
        "For example, if we try to add \"BMW\" two times in the set, the duplicate \nelement is ignored:"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "set<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"BMW\", \"Mazda\"};\n// Print set elements\nfor (string car : cars) {\n  cout << car << \"\\n\";\n}",
        "The output will be:"
      ]
    },
    {
      "heading": "Add Elements",
      "paragraphs": [
        "To add elements to a set, you can use the .insert() function:"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "set<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n// Add new elements\ncars.insert(\"Tesla\");\ncars.insert(\"VW\");\ncars.insert(\"Toyota\");\ncars.insert(\"Audi\");\n"
      ]
    },
    {
      "heading": "Remove Elements",
      "paragraphs": [
        "To remove specific elements from a set, you can use the .erase() function:",
        "To remove all elements from a set, you can use the .clear() function:"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "set<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Remove elements\ncars.erase(\"Volvo\");\ncars.erase(\"Mazda\");\n"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "set<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Remove all elements\ncars.clear();\n"
      ]
    },
    {
      "heading": "Find the Size of a Set",
      "paragraphs": [
        "To find out how many elements a set has, use the .size() function:"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "set<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\ncout << cars.size();\n// Outputs 4"
      ]
    },
    {
      "heading": "Check if a Set is Empty",
      "paragraphs": [
        "Use the .empty() function to find out if a \nset is empty or not.",
        "The .empty() function returns \n1 (true) if the set is empty and 0 (false) \notherwise:"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "set<string> cars;\ncout << cars.empty();\n// Outputs 1 (The set is empty)"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "set<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\ncout << cars.empty();\n// Outputs 0 (not empty)"
      ]
    },
    {
      "heading": "Loop Through a Set",
      "paragraphs": [
        "You can loop through a set with the for-each loop:",
        "Tip: It is also possible to loop through sets with an iterator, which you will learn more about in a later chapter."
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "set<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\nfor (string car : cars) {\n  cout << car << \"\\n\";\n}"
      ]
    }
  ]
}