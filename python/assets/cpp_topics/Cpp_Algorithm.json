{
  "title": "C++ Algorithm",
  "content": [
    {
      "heading": "C++ Algorithms",
      "paragraphs": [
        "In the previous chapters, you learned that data structures (like vectors, lists, etc) are used to store and organize data.",
        "Algorithms are used to solve problems by sorting, searching, and manipulating data structures.",
        "The <algorithm> library provides many useful functions to perform these tasks with iterators.",
        "To use these functions, you must include the <algorithm> header file:"
      ]
    },
    {
      "heading": "Sorting Algorithms",
      "paragraphs": [
        "To sort elements in a data structure, you can use the sort() function.",
        "The sort() function takes iterators (typically a start iterator returned by begin() and an end iterator returned by end()) as parameters:",
        "By default, the elements are sorted in ascending order. In the example above, the elements are sorted alphabetically since they are strings.",
        "If we had a vector of integers, they would be sorted numerically:",
        "To reverse the order, you can use rbegin() and rend() instead of begin() and end():",
        "To only sort specific elements, you could write:"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "// Create a vector called cars that will store strings\nvector<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"} ;\n\n// Sort cars alphabetically\nsort(cars.begin(), cars.end()) ;\n"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "// Create a vector called numbers that will store integers\nvector<int> numbers = {1, 7, 3, 5, 9, 2} ;\n\n// Sort numbers numerically\nsort(numbers.begin(), numbers.end()) ;\n"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "// Create a vector called numbers that will store integers\nvector<int> numbers = {1, 7, 3, 5, 9, 2} ;\n\n// Sort numbers numerically in reverse order\nsort(numbers.rbegin(), numbers.rend()) ;\n"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "// Create a vector called numbers that will store integers\nvector<int> numbers = {1, 7, 3, 5, 9, 2} ;\n\n// Sort numbers numerically, starting from the fourth element (only sort 5, 9, and 2)\nsort(numbers.begin() + 3, numbers.end()) ;\n"
      ]
    },
    {
      "heading": "Searching Algorithms",
      "paragraphs": [
        "To search for specific elements in a vector, you can use the find() function.",
        "It takes three parameters: start_iterator, end_iterator, value, where value is the value to search for:",
        "To search for the first element that is greater than a specific value, you can use the upper_bound() function:",
        "To find the smallest element in a vector, use the min_element() function:",
        "To find the largest element, use the max_element() function:"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "Search for the number 3 in \"numbers\":\n// Create a vector called numbers that will store integers\nvector<int> numbers = {1, 7, 3, 5, 9, 2} ;\n\n// Search for the number 3\nauto it = find(numbers.begin(), numbers.end(), 3) ;\n"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "Find the first value greater than 5 in \"numbers\":\n// Create a vector called numbers that will store integers\nvector<int> numbers = {1, 7, 3, 5, 9, 2} ;\n\n// Sort the vector in ascending order\nsort(numbers.begin(), numbers.end()) ;\n\n// Find the first value that is greater than 5 in the sorted vector\nauto it = upper_bound(numbers.begin(), numbers.end(), 5) ;\n"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "// Create a vector called numbers that will store integers\nvector<int> numbers = {1, 7, 3, 5, 9, 2} ;\n\n// Find the smallest number\nauto it = min_element(numbers.begin(), numbers.end()) ;\n"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "// Create a vector called numbers that will store integers\nvector<int> numbers = {1, 7, 3, 5, 9, 2} ;\n\n// Find the largest number\nauto it = max_element(numbers.begin(), numbers.end()) ;\n"
      ]
    },
    {
      "heading": "Modifying Algorithms",
      "paragraphs": [
        "To copy elements from one vector to another, you can use the copy() function:",
        "To fill all elements in a vector with a value, you can use the fill() function:"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "Copy elements from one vector to another:\n// Create a vector called numbers that will store integers\nvector<int> numbers = {1, 7, 3, 5, 9, 2} ;\n\n// Create a vector called copiedNumbers that should store 6 integers\nvector<int> copiedNumbers(6) ;\n\n// Copy elements from numbers to copiedNumbers\ncopy(numbers.begin(), numbers.end(), copiedNumbers.begin()) ;\n"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "Fill all elements in the numbers vector with the value 35:\n// Create a vector called numbers that will store 6 integers\nvector<int> numbers(6) ;\n\n// Fill all elements in the numbers vector with the value 35\nfill(numbers.begin(),\n numbers.end(), 35) ;\n"
      ]
    },
    {
      "heading": "Complete Algorithm Reference",
      "paragraphs": [
        "For a complete reference of algorithm functions, go to our C++ Algorithm Reference."
      ]
    }
  ]
}