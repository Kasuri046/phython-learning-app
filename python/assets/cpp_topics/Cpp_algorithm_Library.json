{
  "title": "C++ Algorithm Library",
  "content": [
    {
      "heading": "C++ Algorithm Library",
      "paragraphs": [
        "The <algorithm> library has many functions that allow you to modify ranges of data from data structures.",
        "A list of useful functions in the algorithm library can be found below.",
        "Learn more about algorithms in our C++ Algorithm Tutorial.",
        "This library is essential for performing operations such as searching, sorting, and manipulating sequences of elements.",
        "By utilizing the algorithms provided in this library, developers can write cleaner and more efficient code."
      ]
    },
    {
      "heading": "Common Functions in the Algorithm Library",
      "paragraphs": [
        "1. sort: Sorts the elements in a range.",
        "2. reverse: Reverses the order of elements in a range.",
        "3. find: Searches for a specific value in a range.",
        "4. accumulate: Computes the sum of a range of elements.",
        "5. copy: Copies elements from one range to another."
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "Here is a simple example demonstrating how to use the sort function from the <algorithm> library:",
        "```cpp\n#include <iostream>\n#include <algorithm>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers = {5, 2, 8, 1, 4};\n    \n    std::cout << \"Before sorting:\" << std::endl;\n    for (int num : numbers) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    \n    std::sort(numbers.begin(), numbers.end());\n    \n    std::cout << \"After sorting:\" << std::endl;\n    for (int num : numbers) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    \n    return 0;\n}\n```",
        "In this example, we create a vector of integers, display the numbers before sorting, apply the sort function, and then display the sorted numbers."
      ]
    }
  ]
}
