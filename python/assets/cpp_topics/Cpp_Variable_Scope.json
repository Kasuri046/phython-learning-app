{
  "title": "C++ Variable Scope",
  "content": [
    {
      "heading": "C++ Variable Scope",
      "paragraphs": [
        "Now that you understand how functions work, it is important to \nlearn how variables act inside and outside of functions.",
        "In C++, variables are only accessible inside the region they are created. This is called scope."
      ]
    },
    {
      "heading": "Local Scope",
      "paragraphs": [
        "A variable created inside a function belongs to the local scope \nof that function, and can only be used inside that function:",
        "A local variable cannot be used outside the function it belongs to.",
        "If you try to access it outside the function, an error occurs:"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "void myFunction() {\n  // Local variable that belongs to myFunction\n  int x = 5;\n  // Print the variable x\n  cout << x;\n}\n\nint main() {\n  myFunction();\n  return 0;\n}"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "void myFunction() {\n  // Local variable that belongs to myFunction\n  int x = 5;\n}\n\nint main() {\n  myFunction();\n  // Print the variable x in the main function\n  cout << x;\n  return 0;\n}"
      ]
    },
    {
      "heading": "Global Scope",
      "paragraphs": [
        "A variable created outside of a function is called a global variable and \nbelongs to the global scope.",
        "Global variables are available from within any scope, global and local:"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "A variable created outside of a function is global and can therefore be used by anyone:",
        "// Global variable x\nint x = 5;\n\nvoid myFunction() {\n  // We can use x here\n  cout << x << \"\\n\";\n}\n\nint main() {\n  myFunction();\n  // We can also use x here\n  cout << x;\n  return 0;\n}"
      ]
    },
    {
      "heading": "Naming Variables",
      "paragraphs": [
        "If you operate with the same variable name inside and outside of a function, \nC++ will treat them as two separate variables;\nOne available in the global scope (outside the function) and one available in the local scope (inside the function):",
        "However, you should avoid using the same variable name for both global and local variables as it can lead to errors and confusion.",
        "In general, you should be careful with global variables, since they can be \naccessed and modified from any function:"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "The function will print the local x, and then the code will print the global x:",
        "// Global variable x\nint x = 5;\n\nvoid myFunction() {\n  // Local variable with the same name as the global variable (x)\n  int x = 22;\n  cout << x << \"\\n\"; // Refers to the local variable x\n}\n\nint main() {\n  myFunction();\n  cout << x; // Refers to the global variable x\n  return 0;\n}"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "Change the value of x from myFunction:",
        "// Global variable x\nint x = 5;\n\nvoid myFunction() {\n  cout << ++x << \"\\n\"; // Increment the value of x by 1 and print it\n}\n\nint main() {\n  myFunction();\n  cout << x; // Print the global variable x\n  return 0;\n}\n// The value of x is now 6 (no longer 5)"
      ]
    },
    {
      "heading": "Conclusion",
      "paragraphs": [
        "To sum up, use local variables (with good variable names) as much as you can. This will make your code easier to maintain and \nbetter to understand. However, you may find global variables when working on existing C++ programs or \nwhile collaborating with others. Therefore, it is good to understand how the scope works and how to use it effectively to make sure your code is clear and functional."
      ]
    }
  ]
}