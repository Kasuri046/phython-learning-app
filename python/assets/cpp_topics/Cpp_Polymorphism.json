{
  "title": "C++ Polymorphism",
  "content": [
    {
      "heading": "Polymorphism",
      "paragraphs": [
        "Polymorphism means \"many forms\", and it occurs when we have many classes that are related to each other by inheritance.",
        "Like we specified in the previous chapter;\nInheritance lets us inherit attributes and methods from another class. Polymorphism uses those methods to perform different tasks. This allows us to perform a single action in different ways.",
        "For example, think of a base class called Animal that has a method called animalSound(). Derived classes of Animals could be Pigs, Cats, Dogs, Birds - and they also have their own implementation of an animal sound (the pig oinks, and the cat meows, etc.):",
        "Now we can create Pig and Dog objects and override the animalSound() method:"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "// Base class\nclass Animal {\npublic:\n    void animalSound() {\n        cout << \"The animal makes a sound \\n\";\n    }\n};\n\n// Derived class\nclass Pig : public Animal {\npublic:\n    void animalSound() {\n        cout << \"The pig says: wee wee \\n\";\n    }\n};\n\n// Derived class\nclass Dog : public Animal {\npublic:\n    void animalSound() {\n        cout << \"The dog says: bow wow \\n\";\n    }\n};"
      ]
    },
    {
      "heading": "Example",
      "paragraphs": [
        "// Base class\nclass Animal {\npublic:\n    void animalSound() {\n        cout << \"The animal makes a sound \\n\";\n    }\n};\n\n// Derived class\nclass Pig : public Animal {\npublic:\n    void animalSound() {\n        cout << \"The pig says: wee wee \\n\";\n    }\n};\n\n// Derived class\nclass Dog : public Animal {\npublic:\n    void animalSound() {\n        cout << \"The dog says: bow wow \\n\";\n    }\n};\n\nint main() {\n    Animal myAnimal;\n    Pig myPig;\n    Dog myDog;\n\n    myAnimal.animalSound();\n    myPig.animalSound();\n    myDog.animalSound();\n\n    return 0;\n}"
      ]
    }
  ]
}